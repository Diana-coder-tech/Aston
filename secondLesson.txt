1.  Метод запроса OPTIONS используется для получения списка методов, принимаемых веб-сервером.

Этот метод позволяет клиенту определять опции и/или требования, связанные с ресурсом или возможностями сервера, не производя никаких действий над ресурсом и не инициируя его загрузку.

Вызывается, когда нужно узнать, какие методы разрешены на сервере. При помощи этого метода нельзя нанести какой-либо ущерб, а только собрать нужную информацию.

С ним передается УРЛ, и если его можно использовать для получения списка или добавления нового, то методы, которые вернёт запрос OPTIONS — это GET и POST.

2. Ключевые особенности "HTTP" Версии 3.0
- Протокол на основе QUIC. Вместо TCP используется протокол QUIC, который обеспечивает быструю передачу данных и поддержку быстрого переключения между сетями. 
- Мультиплексирование. HTTP/3 не ограничивает количество одновременно открытых потоков, и блокировка одного из них не влияет на другие. Это повышает производительность, экономит ресурсы и делает веб-приложения более устойчивыми к сбоям и перегрузкам. 
- Безопасность. HTTP/3 всегда применяет TLS 1.3 — последнюю версию протокола шифрования и защиты данных на транспортном уровне. Для этого используется новый режим первоначального соединения с протоколом Диффи-Хеллмана, который обеспечивает дополнительную секретность и защиту от атак.

3. Объект "AbortController" и кейсы применения. AbortController — это инструмент в JavaScript, позволяющий прерывать асинхронные операции, такие как сетевые запросы (например, fetch), таймеры (setTimeout, setInterval) и другие.

Некоторые кейсы применения AbortController:

- Отмена сетевых запросов. Например, при выполнении длительных асинхронных операций, которые пользователь может захотеть отменить. 
- Создание пользовательских интерфейсов с отменяемыми действиями. Например, при смене вкладки или нажатии кнопки «Отмена». 
- Оптимизация производительности приложения. Прерывание ненужных операций позволяет сэкономить ресурсы браузера и избежать утечек памяти и других проблем, связанных с некорректным управлением асинхронными операциями. 
- Реализация таймеров. Например, отмена таймера через заданное время, чтобы гарантировать, что запрос не будет выполняться бесконечно. 

4. Temporal dead zone - это период во время выполнения кода в JavaScript, когда переменные, объявленные с let и const, недоступны. Он существует между началом блока, где объявлена переменная, и моментом её инициализации значением. 

Попытка обратиться к переменной внутри TDZ приводит к ReferenceError. 

Цель TDZ — гарантировать, что переменные правильно инициализированы перед использованием. Это помогает предотвратить ошибки, которые могут возникнуть при обращении к переменным в неопределённом или неинициализированном состоянии. 

TDZ применяется только к объявлениям let и const. У переменных, объявленных с var, нет TDZ, они implicitly инициализируются в неопределённое значение.

5. Примеры создания примитивных значений.
string:
const string1 = 'Hello';
const string2 = "Hello";
const string3 = `Hello`;

number:
const number1 = 44;
const number2 = -44;
const number3 = 44.4;
const number4 = 1.4e4; // 14000

boolean:
const isTrue = true;
const isFalse = false;

null:
const thisNull = null;

undefined:
const thisUndefined = undefined;

// Переменная объявлена, но не инициализирована
let notAssigned;
console.log(otAssigned);

// Отсутствует возвращаемое значение у функции
finction noReturn() {}
console.log(noReturn());

// Отсутствует вызываемое свойство у объекта
const obj = {};
console.log(obj.name);

symbol:
const thisSymbol = Symbol();

bigInt:
const bigNumber = 35354747448827236374848843n;
const bigNumber2 = BigInt("47473728929934575838392029485757474");

6. console.log( "B" + "a" + (1 - "hello")); // 'BaNaN'
console.log((true && 3) + "d"); // 3d
console.log(Boolean(true && 3) + "d"); // trued
console.log(NaN + 1) // NaN
console.log(NaN + 'o') // NaNo
console.log(undefined + 1) // undefined1
console.log(undefined - 1) // NaN
console.log(null + 1) // 1
console.log(null / 5) // 0
console.log(5 / undefined) // NaN
console.log(-5 / null) // -Infinity
console.log(null == 0) // false
console.log(null == '') // false
console.log(null > 0) // false
console.log(null >= 0) // true
console.log(null == '') // false
console.log('foo' + + 'bar') // fooNaN
console.log('11' + '1' - 1) // 110
console.log(typeof Object) // function
console.log(typeof Math) // Object
console.log(new String('foo')=='foo') // true
console.log(new String('foo')==='foo') // false
