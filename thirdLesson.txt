const innerObject = {};
const middleArray = [1, 2, 3, innerObject];
const workingObject = {
   a: middleArray 
}

Задание 1 – Создать объект workingObject всеми возможными способами:
const workingObject = Object.assign({}, { a: middleArray });

const workingObject = Object.create({}, {
    a: {
        enumerable: true,
        value: middleArray,
    },
});

const workingObject = Object.defineProperty({}, 'a', {
    value: middleArray,
    enumerable: true,
    writable: true,
    configurable: true,
});

const workingObject = new Object();
workingObject.a = middleArray;

Задание 2 – Скопировать объект workingObject всеми возможными способами:

const newWorkingObject = Object.assign({}, workingObject);

const newWorkingObject = { ...workingObject };

const newWorkingObject = JSON.parse(JSON.stringify(workingObject));

const newWorkingObject = structuredClone(workingObject);

import _ from 'lodash';
const newWorkingObject = _.cloneDeep(workingObject);


Задание 3 – Создать функцию makeCounter всеми описанными и возможными способами:

function makeCounter() {
    let count = 0;
    return function() {
        return count++;
    };
}

const makeCounter = () => {
    let count = 0;
    return () => count++;
};

function makeCounter() {
    let count = 0;
    return {
        next: () => count++,
        reset: () => count = 0,
        getCount: () => count
    };
}

class Counter {
    constructor() {
        this.count = 0;
    }

    next() {
        return this.count++;
    }

    reset() {
        return this.count = 0;
    }
}

Бонус Задание 1 – Написать функцию глубокого сравнения двух обьектов:

const obj1 = { 
here: { is: "on", other: "3" }, 
object: 5
};

const obj2 = { 
here: { is: "on", other: "2" }, 
object: 5
}; 

const deepEqual = (obj1, obj2) => {
   if (obj1 === obj2) {
    return true;
   }

   if (typeof obj1 !== 'object' || typeof obj2 !== 'object' || typeof obj1 === null || typeof obj2 === null) {
    return false;
   }

   const keys1 = Object.keys(obj1);
   const keys2 = Object.keys(obj2);

   if (keys1.length !== keys2.length) return false;

   return keys1.every(key => keys2.includes(key) && deepEqual(obj1[key], obj2[key]));
}; 

Бонус Задание 2 – Развернуть строку в обратном направлении при помощи методов массивов: 

function reverseStr(str) {
    return str.split('').reverse().join('');
}

Задача на замыкание 1:

function createIncrement() {
         let value = 0

         function increment() {
                  value += 1;
                  console.log(value);
         }

         const message = `Current value is ${value}`;

         function log(){
                  console.log(message);
         }
         
         return [increment, log];
}

const [increment, log] = createIncrement();

increment() // 1
increment() // 2
increment() // 3

log() //"Current value is 0"        //  не 3, тк функциz log() выводит message, которая в свою очередь содержит одно и тоже значение value, равное 0. Если хотим, чтобы значение менялось, то необходимо переписать console.log(`Current value is ${value}`) и убрать const message

Задача на замыкание 2:

let group = getGroup();

group[0](); // 10
group[5](); // 10

Тк все функции ссылаются на одну и ту же переменную i, которая после завершения цикла равна 10. Замыкание не сработает

function getGroup() {
  let students = [];
  let i = 0;
  while (i < 10) {
    students[i] = function() {
      console.log(i);
    }
    i++
  }

  return students;
}

Задача на замыкание 3:

var globalVar = 'global';
var outerVar = 'outer';

function outerFunc(outerParam) {
    function innerFunc(innerParam) {
        console.log(globalVar, outerParam, innerParam); // guess,outer,inner
    }
    return innerFunc;
}

const x = outerFunc(outerVar);
outerVar = 'outer-2';
globalVar = 'guess';
x('inner'); // Вызов функции innerFunc с параметром 'inner'

Глобальная функция structuredClone() в JavaScript предназначена для глубокого клонирования объектов. Она создаёт новый объект, который имеет те же свойства, что и исходный объект, и все свойства, которые являются объектами, также клонируются. Ограничения: не копирует функции и элементы DOM. 

Методы JSON.stringify() и JSON.parse() часто используются для копирования объектов и преобразования данных в формат JSON.
Метод JSON.stringify() превращает объект в JSON-строку. Метод JSON.parse() преобразует JSON-строку обратно в объект. Лучше использовать JSON.stringify/JSON.parse() для передачи и хранения данных, но избегать его для сложных структур. Копирует вложенные структуры без сохранения ссылок. Ограничения: функции не сохраняются, так как JSON не поддерживает их; теряется undefined, Symbol и BigInt; теряется Map, Set, Date; не поддерживает циклические ссылки.