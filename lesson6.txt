1. Promise.reject("a");
.catch((p) => p + "b"); // перехват ошибки и р = "а", обрботка ее, возвращает "ab"
.catch((p) => p + "c"); // ошибки нет, catch пропускается
.then((p) => p + "d"); // "abd"
.then((p) => p + "f"); // "abdf"
.catch((p) => p + "h"); // ошибки нет, catch пропускается
.finally((p) => p + "e"); // "abdf"
.then((p) => console.log(p)); // "abdf"

2. console.log("1");

setTimeout(() => console.log("2"), 1);

let promise = new Promise((resolve) => {
    console.log("3");
    resolve();
});

promise.then(() => console.log("4"));

setTimeout(() => console.log("5"));

console.log("6");

// 1 3 6 4 2 5

3. setTimeout(() => console.log("a"));

Promise.resolve()
.then((first) => {
    console.log("first:", first);
    return "b";
})
.then(
    Promise.resolve().then((second) => {
    console.log("second:", second);
    return "c";
    })
)
.then((third) => console.log("third:", third));

console.log("d");

// d first: undefined second: undefined third: undefined a

4. let a = 5;

console.log(a);

setTimeout(() => {
console.log(a);
a = 10;
}, 0);

Promise.resolve().then(() => {
    console.log(a);
    a = 15;
});

console.log(a);

// 5 5 15